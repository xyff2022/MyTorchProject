import torch

def wh_iou(wh1, wh2):
    """
    计算宽高IoU (不考虑位置)
    Args:
        wh1 (Tensor): 第一组框的宽高, shape: [N, 2]
        wh2 (Tensor): 第二组框的宽高, shape: [M, 2]
    Returns:
        iou (Tensor): 形状IoU, shape: [N, M]
    """
    # -----------------------------------------------------------#
    #   步骤 1: 重塑张量以进行广播
    # -----------------------------------------------------------#
    # wh1 shape: [N, 2] -> [N, 1, 2]
    wh1 = wh1.unsqueeze(1)
    # wh2 shape: [M, 2] -> [1, M, 2]
    wh2 = wh2.unsqueeze(0)

    # -----------------------------------------------------------#
    #   步骤 2: 计算交集面积
    #   torch.min会广播wh1和wh2到[N, M, 2]，然后逐元素比较
    #   .prod(2)会沿着最后一个维度(dim=2)将[min_w, min_h]相乘得到交集面积
    # -----------------------------------------------------------#
    inter = torch.min(wh1, wh2).prod(2)

    # -----------------------------------------------------------#
    #   步骤 3: 计算并集面积并返回IoU
    #   wh1.prod(2) -> 面积A, shape: [N, 1]
    #   wh2.prod(2) -> 面积B, shape: [1, M]
    #   两者相加再减去inter，会通过广播得到[N, M]的并集面积
    # -----------------------------------------------------------#
    return inter / (wh1.prod(2) + wh2.prod(2) - inter)